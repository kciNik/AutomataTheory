# ex: set ro:
# DO NOT EDIT.
# generated by smc (http://smc.sourceforge.net/)
# from file : smcFile.sm

import statemap


class AppClassState(statemap.State):

    def Entry(self, fsm):
        pass

    def Exit(self, fsm):
        pass

    def AFLetter(self, fsm):
        self.Default(fsm)

    def ColonSym(self, fsm):
        self.Default(fsm)

    def Digit(self, fsm):
        self.Default(fsm)

    def EOS(self, fsm):
        self.Default(fsm)

    def Letter(self, fsm):
        self.Default(fsm)

    def SlashSym(self, fsm):
        self.Default(fsm)

    def SpaceSym(self, fsm):
        self.Default(fsm)

    def Start(self, fsm):
        self.Default(fsm)

    def SymbolSym(self, fsm):
        self.Default(fsm)

    def Unknown(self, fsm):
        self.Default(fsm)

    def VertSym(self, fsm):
        self.Default(fsm)

    @staticmethod
    def Default(fsm):
        msg = "\n\tState: %s\n\tTransition: %s" % (
            fsm.getState().getName(), fsm.getTransition())
        raise statemap.TransitionUndefinedException(msg)


class MainMap_Default(AppClassState):

    def Start(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.ClearSMC()
        finally:
            fsm.setState(MainMap.Start)
            fsm.getState().Entry(fsm)

    def Unknown(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.Unacceptable()
        finally:
            fsm.setState(MainMap.Error)
            fsm.getState().Entry(fsm)

    def EOS(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.Unacceptable()
        finally:
            fsm.setState(MainMap.Error)
            fsm.getState().Entry(fsm)

    def Letter(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.Unacceptable()
        finally:
            fsm.setState(MainMap.Error)
            fsm.getState().Entry(fsm)

    def AFLetter(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.Unacceptable()
        finally:
            fsm.setState(MainMap.Error)
            fsm.getState().Entry(fsm)

    def Digit(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.Unacceptable()
        finally:
            fsm.setState(MainMap.Error)
            fsm.getState().Entry(fsm)

    def SpaceSym(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.Unacceptable()
        finally:
            fsm.setState(MainMap.Error)
            fsm.getState().Entry(fsm)

    def VertSym(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.Unacceptable()
        finally:
            fsm.setState(MainMap.Error)
            fsm.getState().Entry(fsm)

    def SlashSym(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.Unacceptable()
        finally:
            fsm.setState(MainMap.Error)
            fsm.getState().Entry(fsm)

    def ColonSym(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.Unacceptable()
        finally:
            fsm.setState(MainMap.Error)
            fsm.getState().Entry(fsm)

    def SymbolSym(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.Unacceptable()
        finally:
            fsm.setState(MainMap.Error)
            fsm.getState().Entry(fsm)


class MainMap_Start(MainMap_Default):

    def AFLetter(self, fsm):
        ctxt = fsm.getOwner()
        if ctxt.isLess4():
            endState = fsm.getState()
            fsm.clearState()
            try:
                ctxt.LengthInc()
                ctxt.makeName()
            finally:
                fsm.setState(endState)
        else:
            MainMap_Default.AFLetter(self, fsm)

    def ColonSym(self, fsm):
        ctxt = fsm.getOwner()
        if ctxt.isED2K():
            fsm.getState().Exit(fsm)
            fsm.clearState()
            try:
                ctxt.LengthZero()
            finally:
                fsm.setState(MainMap.Colon)
                fsm.getState().Entry(fsm)
        else:
            MainMap_Default.ColonSym(self, fsm)

    def Digit(self, fsm):
        ctxt = fsm.getOwner()
        if ctxt.isLess4():
            endState = fsm.getState()
            fsm.clearState()
            try:
                ctxt.LengthInc()
                ctxt.makeName()
            finally:
                fsm.setState(endState)
        else:
            fsm.getState().Exit(fsm)
            fsm.clearState()
            try:
                ctxt.Unacceptable()
            finally:
                fsm.setState(MainMap.Error)
                fsm.getState().Entry(fsm)

    def Letter(self, fsm):
        ctxt = fsm.getOwner()
        if ctxt.isLess4():
            endState = fsm.getState()
            fsm.clearState()
            try:
                ctxt.LengthInc()
                ctxt.makeName()
            finally:
                fsm.setState(endState)
        else:
            fsm.getState().Exit(fsm)
            fsm.clearState()
            try:
                ctxt.Unacceptable()
            finally:
                fsm.setState(MainMap.Error)
                fsm.getState().Entry(fsm)


class MainMap_Colon(MainMap_Default):

    def AFLetter(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.Unacceptable()
        finally:
            fsm.setState(MainMap.Error)
            fsm.getState().Entry(fsm)

    def Digit(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.Unacceptable()
        finally:
            fsm.setState(MainMap.Error)
            fsm.getState().Entry(fsm)

    def Letter(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.Unacceptable()
        finally:
            fsm.setState(MainMap.Error)
            fsm.getState().Entry(fsm)

    def SlashSym(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.LengthInc()
        finally:
            fsm.setState(MainMap.Slash)
            fsm.getState().Entry(fsm)

    def SymbolSym(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.Unacceptable()
        finally:
            fsm.setState(MainMap.Error)
            fsm.getState().Entry(fsm)


class MainMap_Slash(MainMap_Default):

    def AFLetter(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.Unacceptable()
        finally:
            fsm.setState(MainMap.Error)
            fsm.getState().Entry(fsm)

    def Digit(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.Unacceptable()
        finally:
            fsm.setState(MainMap.Error)
            fsm.getState().Entry(fsm)

    def EOS(self, fsm):
        ctxt = fsm.getOwner()
        if ctxt.isCount5():
            fsm.getState().Exit(fsm)
            fsm.clearState()
            try:
                ctxt.Acceptable()
            finally:
                fsm.setState(MainMap.OK)
                fsm.getState().Entry(fsm)
        else:
            MainMap_Default.EOS(self, fsm)

    def Letter(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.Unacceptable()
        finally:
            fsm.setState(MainMap.Error)
            fsm.getState().Entry(fsm)

    def SlashSym(self, fsm):
        ctxt = fsm.getOwner()
        if ctxt.isLess2():
            endState = fsm.getState()
            fsm.clearState()
            try:
                ctxt.LengthInc()
            finally:
                fsm.setState(endState)
        else:
            fsm.getState().Exit(fsm)
            fsm.clearState()
            try:
                ctxt.Unacceptable()
            finally:
                fsm.setState(MainMap.Error)
                fsm.getState().Entry(fsm)

    def VertSym(self, fsm):
        ctxt = fsm.getOwner()
        if ctxt.isLess2():
            fsm.getState().Exit(fsm)
            fsm.clearState()
            try:
                ctxt.Unacceptable()
            finally:
                fsm.setState(MainMap.Error)
                fsm.getState().Entry(fsm)
        else:
            fsm.getState().Exit(fsm)
            fsm.clearState()
            try:
                ctxt.LengthZero()
                ctxt.count()
            finally:
                fsm.setState(MainMap.Vert)
                fsm.getState().Entry(fsm)


class MainMap_Vert(MainMap_Default):

    def AFLetter(self, fsm):
        ctxt = fsm.getOwner()
        if ctxt.isCount1():
            fsm.getState().Exit(fsm)
            fsm.clearState()
            try:
                ctxt.LengthInc()
                ctxt.makeName()
            finally:
                fsm.setState(MainMap.Title)
                fsm.getState().Entry(fsm)
        elif ctxt.isCount2():
            fsm.getState().Exit(fsm)
            # No actions.
            pass
            fsm.setState(MainMap.Name_File)
            fsm.getState().Entry(fsm)
        elif ctxt.isCount4():
            fsm.getState().Exit(fsm)
            fsm.clearState()
            try:
                ctxt.makeName()
            finally:
                fsm.setState(MainMap.Hash)
                fsm.getState().Entry(fsm)
        else:
            MainMap_Default.AFLetter(self, fsm)

    def Digit(self, fsm):
        ctxt = fsm.getOwner()
        if ctxt.isCount3():
            fsm.getState().Exit(fsm)
            # No actions.
            pass
            fsm.setState(MainMap.Size_File)
            fsm.getState().Entry(fsm)
        elif ctxt.isCount4():
            fsm.getState().Exit(fsm)
            fsm.clearState()
            try:
                ctxt.makeName()
            finally:
                fsm.setState(MainMap.Hash)
                fsm.getState().Entry(fsm)
        else:
            MainMap_Default.Digit(self, fsm)

    def Letter(self, fsm):
        ctxt = fsm.getOwner()
        if ctxt.isCount1():
            fsm.getState().Exit(fsm)
            fsm.clearState()
            try:
                ctxt.LengthInc()
                ctxt.makeName()
            finally:
                fsm.setState(MainMap.Title)
                fsm.getState().Entry(fsm)
        elif ctxt.isCount2():
            fsm.getState().Exit(fsm)
            # No actions.
            pass
            fsm.setState(MainMap.Name_File)
            fsm.getState().Entry(fsm)
        else:
            MainMap_Default.Letter(self, fsm)

    def SlashSym(self, fsm):
        ctxt = fsm.getOwner()
        if ctxt.isCount5():
            fsm.getState().Exit(fsm)
            # No actions.
            pass
            fsm.setState(MainMap.Slash)
            fsm.getState().Entry(fsm)
        else:
            MainMap_Default.SlashSym(self, fsm)

    def SymbolSym(self, fsm):
        ctxt = fsm.getOwner()
        if ctxt.isCount2():
            fsm.getState().Exit(fsm)
            # No actions.
            pass
            fsm.setState(MainMap.Name_File)
            fsm.getState().Entry(fsm)
        else:
            MainMap_Default.SymbolSym(self, fsm)


class MainMap_Title(MainMap_Default):

    def AFLetter(self, fsm):
        ctxt = fsm.getOwner()
        if ctxt.isLess4():
            endState = fsm.getState()
            fsm.clearState()
            try:
                ctxt.LengthInc()
                ctxt.makeName()
            finally:
                fsm.setState(endState)
        else:
            fsm.getState().Exit(fsm)
            fsm.clearState()
            try:
                ctxt.Unacceptable()
            finally:
                fsm.setState(MainMap.Error)
                fsm.getState().Entry(fsm)

    def Digit(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.Unacceptable()
        finally:
            fsm.setState(MainMap.Error)
            fsm.getState().Entry(fsm)

    def Letter(self, fsm):
        ctxt = fsm.getOwner()
        if ctxt.isLess4():
            endState = fsm.getState()
            fsm.clearState()
            try:
                ctxt.LengthInc()
                ctxt.makeName()
            finally:
                fsm.setState(endState)
        else:
            fsm.getState().Exit(fsm)
            fsm.clearState()
            try:
                ctxt.Unacceptable()
            finally:
                fsm.setState(MainMap.Error)
                fsm.getState().Entry(fsm)

    def VertSym(self, fsm):
        ctxt = fsm.getOwner()
        if ctxt.isFile():
            fsm.getState().Exit(fsm)
            fsm.clearState()
            try:
                ctxt.LengthZero()
                ctxt.count()
            finally:
                fsm.setState(MainMap.Vert)
                fsm.getState().Entry(fsm)
        else:
            MainMap_Default.VertSym(self, fsm)


class MainMap_Name_File(MainMap_Default):

    def AFLetter(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(MainMap.Name_File)
        fsm.getState().Entry(fsm)

    def Digit(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.Unacceptable()
        finally:
            fsm.setState(MainMap.Error)
            fsm.getState().Entry(fsm)

    def Letter(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(MainMap.Name_File)
        fsm.getState().Entry(fsm)

    def SymbolSym(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(MainMap.Name_File)
        fsm.getState().Entry(fsm)

    def VertSym(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.count()
        finally:
            fsm.setState(MainMap.Vert)
            fsm.getState().Entry(fsm)


class MainMap_Size_File(MainMap_Default):

    def AFLetter(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.Unacceptable()
        finally:
            fsm.setState(MainMap.Error)
            fsm.getState().Entry(fsm)

    def Digit(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(MainMap.Size_File)
        fsm.getState().Entry(fsm)

    def Letter(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.Unacceptable()
        finally:
            fsm.setState(MainMap.Error)
            fsm.getState().Entry(fsm)

    def SymbolSym(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.Unacceptable()
        finally:
            fsm.setState(MainMap.Error)
            fsm.getState().Entry(fsm)

    def VertSym(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.count()
        finally:
            fsm.setState(MainMap.Vert)
            fsm.getState().Entry(fsm)


class MainMap_Hash(MainMap_Default):

    def AFLetter(self, fsm):
        ctxt = fsm.getOwner()
        if ctxt.isLess32():
            endState = fsm.getState()
            fsm.clearState()
            try:
                ctxt.LengthInc()
                ctxt.makeName()
            finally:
                fsm.setState(endState)
        else:
            fsm.getState().Exit(fsm)
            fsm.clearState()
            try:
                ctxt.Unacceptable()
            finally:
                fsm.setState(MainMap.Error)
                fsm.getState().Entry(fsm)

    def Digit(self, fsm):
        ctxt = fsm.getOwner()
        if ctxt.isLess32():
            endState = fsm.getState()
            fsm.clearState()
            try:
                ctxt.LengthInc()
                ctxt.makeName()
            finally:
                fsm.setState(endState)
        else:
            fsm.getState().Exit(fsm)
            fsm.clearState()
            try:
                ctxt.Unacceptable()
            finally:
                fsm.setState(MainMap.Error)
                fsm.getState().Entry(fsm)

    def Letter(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.Unacceptable()
        finally:
            fsm.setState(MainMap.Error)
            fsm.getState().Entry(fsm)

    def VertSym(self, fsm):
        ctxt = fsm.getOwner()
        if ctxt.isLess32():
            fsm.getState().Exit(fsm)
            fsm.clearState()
            try:
                ctxt.Unacceptable()
            finally:
                fsm.setState(MainMap.Error)
                fsm.getState().Entry(fsm)
        else:
            fsm.getState().Exit(fsm)
            fsm.clearState()
            try:
                ctxt.LengthZero()
                ctxt.count()
                ctxt.PutInDec()
            finally:
                fsm.setState(MainMap.Vert)
                fsm.getState().Entry(fsm)


class MainMap_Error(MainMap_Default):

    def EOS(self, fsm):
        ctxt = fsm.getOwner()
        endState = fsm.getState()
        fsm.clearState()
        try:
            ctxt.Unacceptable()
            ctxt.printerr()
        finally:
            fsm.setState(endState)


class MainMap_OK(MainMap_Default):

    def EOS(self, fsm):
        ctxt = fsm.getOwner()
        endState = fsm.getState()
        fsm.clearState()
        try:
            ctxt.Acceptable()
        finally:
            fsm.setState(endState)


class MainMap(object):
    Start = MainMap_Start('MainMap.Start', 0)
    Colon = MainMap_Colon('MainMap.Colon', 1)
    Slash = MainMap_Slash('MainMap.Slash', 2)
    Vert = MainMap_Vert('MainMap.Vert', 3)
    Title = MainMap_Title('MainMap.Title', 4)
    Name_File = MainMap_Name_File('MainMap.Name_File', 5)
    Size_File = MainMap_Size_File('MainMap.Size_File', 6)
    Hash = MainMap_Hash('MainMap.Hash', 7)
    Error = MainMap_Error('MainMap.Error', 8)
    OK = MainMap_OK('MainMap.OK', 9)
    Default = MainMap_Default('MainMap.Default', -1)


class AppClass_sm(statemap.FSMContext):

    def __init__(self, owner):
        statemap.FSMContext.__init__(self, MainMap.Start)
        self._owner = owner

    def __getattr__(self, attrib):
        def trans_sm(*arglist):
            self._transition = attrib
            getattr(self.getState(), attrib)(self, *arglist)
            self._transition = None

        return trans_sm

    def enterStartState(self):
        self._state.Entry(self)

    def getOwner(self):
        return self._owner

# Local variables:
#  buffer-read-only: t
# End:
